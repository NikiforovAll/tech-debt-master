using System.Reflection;
using Spectre.Console;
using Spectre.Console.Cli;

namespace TechDebtMaster.Cli.Commands;

public class CapabilitiesCommand : Command<CapabilitiesCommand.Settings>
{
    public override int Execute(CommandContext context, Settings settings)
    {
        // Render ASCII art title
        var figlet = new FigletText("TechDebtMaster").Centered().Color(Color.Green);
        AnsiConsole.Write(figlet);

        // Add a divider
        AnsiConsole.Write(new Rule().RuleStyle("grey30"));
        AnsiConsole.WriteLine();

        // Display version
        var version = Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "1.0.0";
        AnsiConsole.MarkupLine($"[dim]Version {version}[/]");
        AnsiConsole.WriteLine();

        // Main question and answer
        AnsiConsole.MarkupLine("[bold yellow]What can TechDebtMaster do?[/]");
        AnsiConsole.WriteLine();

        AnsiConsole.MarkupLine(
            "[cyan]TechDebtMaster is your AI-powered companion for managing technical debt in your codebase.[/]"
        );
        AnsiConsole.WriteLine();

        // Core capabilities
        AnsiConsole.MarkupLine("[bold underline]üîç Core Capabilities:[/]");
        AnsiConsole.WriteLine();

        var capabilities = new List<(string Icon, string Title, string Description)>
        {
            ("üìä", "Smart Code Analysis", "Analyze your entire codebase using AI to identify technical debt, code smells, and improvement opportunities"),
            ("üéØ", "Prioritized Insights", "Get severity-based rankings of issues, helping you focus on what matters most"),
            ("üì±", "Interactive Reports", "Generate beautiful HTML reports you can share with your team and modify directly"),
            ("üîÑ", "Change Tracking", "Monitor how your technical debt evolves over time with intelligent file change detection"),
            ("üè∑Ô∏è", "Categorized Issues", "Organize findings by tags like Performance, Security, Code Smells, and more"),
            ("üõ†Ô∏è", "Developer Integration", "Works seamlessly with VS Code and other tools through MCP (Model Context Protocol)"),
            ("‚öôÔ∏è", "Flexible Configuration", "Customize analysis patterns, AI models, and output formats to match your workflow"),
            ("üé®", "Template Management", "Use built-in or custom prompt templates to tailor analysis to your specific needs")
        };

        foreach (var (icon, title, description) in capabilities)
        {
            AnsiConsole.MarkupLine($"[green]{icon}[/] [bold]{title}[/]");
            AnsiConsole.MarkupLine($"   {description}");
            AnsiConsole.WriteLine();
        }

        // Workflow overview
        AnsiConsole.MarkupLine("[bold underline]üöÄ How It Works:[/]");
        AnsiConsole.WriteLine();

        var workflow = new List<(string Step, string Command, string Description)>
        {
            ("1Ô∏è‚É£", "tdm init", "Initialize TechDebtMaster in your repository"),
            ("2Ô∏è‚É£", "tdm repo index", "Scan and index your codebase for analysis"),
            ("3Ô∏è‚É£", "tdm debt analyze", "Let AI analyze your code for technical debt"),
            ("4Ô∏è‚É£", "tdm debt show", "View results in an organized tree structure"),
            ("5Ô∏è‚É£", "tdm debt report", "Generate shareable HTML reports")
        };

        foreach (var (step, command, description) in workflow)
        {
            AnsiConsole.MarkupLine($"[yellow]{step}[/] [blue]{command}[/] - {description}");
        }

        AnsiConsole.WriteLine();

        // Integration capabilities
        AnsiConsole.MarkupLine("[bold underline]üîå Integration & Automation:[/]");
        AnsiConsole.WriteLine();

        AnsiConsole.MarkupLine("‚Ä¢ [green]MCP Server[/] - Start with '[blue]tdm mcp[/]' to enable external tool integration");
        AnsiConsole.MarkupLine("‚Ä¢ [green]VS Code Integration[/] - Use '[blue]tdm init --profile vscode[/]' for seamless editor integration");
        AnsiConsole.MarkupLine("‚Ä¢ [green]CI/CD Ready[/] - Perfect for automated code quality checks in your pipeline");
        AnsiConsole.MarkupLine("‚Ä¢ [green]Team Collaboration[/] - Share and modify HTML reports with your team");
        AnsiConsole.WriteLine();

        // Supported technologies
        AnsiConsole.MarkupLine("[bold underline]üíª What Languages & Technologies?[/]");
        AnsiConsole.WriteLine();

        AnsiConsole.MarkupLine("TechDebtMaster works with [green]any programming language[/] because it uses:");
        AnsiConsole.MarkupLine("‚Ä¢ [cyan]AI-powered analysis[/] that understands code patterns across languages");
        AnsiConsole.MarkupLine("‚Ä¢ [cyan]Flexible file filtering[/] to focus on specific file types or patterns");
        AnsiConsole.MarkupLine("‚Ä¢ [cyan]Customizable prompts[/] that can be tailored to your technology stack");
        AnsiConsole.WriteLine();

        // Getting started
        AnsiConsole.MarkupLine("[bold underline]üéØ Ready to Start?[/]");
        AnsiConsole.WriteLine();

        AnsiConsole.MarkupLine("Try these commands to get started:");
        AnsiConsole.MarkupLine("‚Ä¢ [blue]tdm help[/] - See detailed usage examples");
        AnsiConsole.MarkupLine("‚Ä¢ [blue]tdm init[/] - Initialize in your current repository");
        AnsiConsole.MarkupLine("‚Ä¢ [blue]tdm config show[/] - View current configuration");
        AnsiConsole.WriteLine();

        AnsiConsole.MarkupLine("[dim]TechDebtMaster: Making technical debt management simple, actionable, and collaborative.[/]");

        return 0;
    }

    public class Settings : CommandSettings { }
}